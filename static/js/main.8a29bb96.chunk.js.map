{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","e","preventDefault","console","log","videoID","state","videoid","match","getComments","keyword","handleChange","target","value","setState","defineProperty","name","id","key","fetch","results","then","response","json","data","comments","items","amount","pageInfo","totalResults","catch","error","List","map","commentObj","react_default","a","createElement","className","toString","src","snippet","topLevelComment","authorProfileImageUrl","height","href","authorDisplayName","textOriginal","onSubmit","type","placeholder","required","onChange","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCInBC,2BAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,MAAQ,SAACC,GACPA,EAAEC,iBACFC,QAAQC,IAAI,gBACZ,IAAIC,EAAUZ,EAAKa,MAAMC,QAAQC,MAAM,8FACvCf,EAAKgB,YAAYJ,EAAQ,GAAIZ,EAAKa,MAAMI,UAbvBjB,EAiBnBkB,aAAe,SAACV,GACS,KAAlBA,EAAEW,OAAOC,OAAapB,EAAKqB,SAALpB,OAAAqB,EAAA,EAAArB,CAAA,GAAiBO,EAAEW,OAAOI,KAAOf,EAAEW,OAAOC,SAlBpDpB,EAqBnBgB,YAAc,SAACQ,EAAIC,GAEjBC,MAAM,8IAAoHF,EAAK,eAAiBxB,EAAKa,MAAMc,QAAU,gBAAkBF,GACtLG,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJ/B,EAAKqB,SAAS,CACZW,SAAUD,EAAKE,MACfC,OAAQH,EAAKI,SAASC,eAExB1B,QAAQC,IAAIX,EAAKa,MAAMmB,YAExBK,MAAM,SAAAC,GACL5B,QAAQC,IAAI2B,MAjCdtC,EAAKa,MAAQ,CACXc,QAAS,IACTK,SAAU,GACVE,OAAQ,IALOlC,wEA4CjB,IAAMuC,EAAOpC,KAAKU,MAAMmB,SAASQ,IAAI,SAACC,GAAD,OACnCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCAAiCpB,IAAKgB,EAAWjB,GAAGsB,YACjEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKN,EAAWO,QAAQC,gBAAgBD,QAAQE,sBAAuBC,OAAQ,MAEtFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiBO,KAAK,KAAKX,EAAWO,QAAQC,gBAAgBD,QAAQK,oBAErFX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAA4BJ,EAAWO,QAAQC,gBAAgBD,QAAQM,kBAM1F,OAEEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iCAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,QAAMW,SAAUpD,KAAKI,OACnBmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOX,UAAU,eAAetB,KAAK,UAAUkC,YAAY,gBAAgBC,UAAQ,EAAEC,SAAUxD,KAAKe,iBAGpHwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOX,UAAU,eAAetB,KAAK,UAAUkC,YAAY,UAAUC,UAAQ,EAAEC,SAAUxD,KAAKe,iBAG9GwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQY,KAAK,SAASX,UAAU,mBAAhC,cAMRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,YAA8B1C,KAAKU,MAAMqB,SAE3CQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdN,iBAjGYqB,cCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjD,MACvB,2DCZNkD,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.8a29bb96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nexport default class App extends Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      results: 100,\n      comments: [],\n      amount: ''\n    }\n  }\n\n  start = (e) => {\n    e.preventDefault ();\n    console.log('lanch script');\n    var videoID = this.state.videoid.match(/(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/ ]{11})/i);\n    this.getComments(videoID[1], this.state.keyword)\n    \n  }\n\n  handleChange = (e) => {\n    if (!e.target.value == \"\") this.setState({ [e.target.name]: e.target.value });\n  }\n\n  getComments = (id, key) => {\n    const api = \"AIzaSyAu3DGXDXUEw_V-ZqqmCNN3yrAiijZdPMI\";\n    fetch('https://www.googleapis.com/youtube/v3/commentThreads?key=' + api + '&textFormat=plainText&part=snippet&videoId=' + id + '&maxResults=' + this.state.results + '&searchTerms=' + key)\n    .then(response => {\n      return response.json();\n    })\n    .then(data => {\n      this.setState({\n        comments: data.items,\n        amount: data.pageInfo.totalResults\n      })\n      console.log(this.state.comments);\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }\n\n  render() {\n    // var List = this.state.comments.map(function(personObj){\n    //   return personObj.name;\n    // });\n\n    const List = this.state.comments.map((commentObj) =>\n      <div className=\"blog-comments__item d-flex p-3\" key={commentObj.id.toString()}>\n        <div className=\"blog-comments__avatar mr-3\">\n          <img src={commentObj.snippet.topLevelComment.snippet.authorProfileImageUrl} height={30} />\n        </div>\n        <div className=\"blog-comments__content\">\n          <div className=\"blog-comments__meta text-muted\">\n            <a className=\"text-secondary\" href=\"#\">{commentObj.snippet.topLevelComment.snippet.authorDisplayName}</a>\n          </div>\n          <p className=\"m-0 my-1 mb-2 text-muted\">{commentObj.snippet.topLevelComment.snippet.textOriginal}</p>\n        </div>\n      </div>\n    )\n    \n\n    return (\n\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          {/* End Main Sidebar */}\n          <main className=\"main-content col-md-8 mx-auto\">\n            {/* / .main-navbar */}\n            <div className=\"main-content-container container-fluid px-4\">\n              {/* Page Header */}\n              <div className=\"page-header row no-gutters py-4\">\n                <form onSubmit={this.start}>\n                  <div className=\"row\">\n                    <div className=\"col-md-4\">\n                      <div className=\"form-group\">\n                        <input type=\"text\" className=\"form-control\" name=\"videoid\" placeholder=\"Youtube video\" required  onChange={this.handleChange} />\n                      </div>\n                    </div>\n                    <div className=\"col-md-4\">\n                      <div className=\"form-group\">\n                        <input type=\"text\" className=\"form-control\" name=\"keyword\" placeholder=\"Keyword\" required  onChange={this.handleChange} />\n                      </div>\n                    </div>\n                    <div className=\"col-md-4\">\n                      <button type=\"submit\" className=\"btn btn-warning\">Search</button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n              {/* End Page Header */}\n              <div className=\"row\">\n                <div className=\"col-md-12 col-sm-12 mb-4\">\n                  <div className=\"card card-small blog-comments\">\n                    <div className=\"card-header border-bottom\">\n                      <h6 className=\"m-0\">Results: {this.state.amount}</h6>\n                    </div>\n                    <div className=\"card-body p-0\">\n                    {List}\n                    </div>               \n                  </div>\n                </div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}